ALTER TABLE B_ANSIBLE_IF_INFO ADD COLUMN ANSTWR_HOST_ID INT AFTER ANSIBLE_PORT;
ALTER TABLE B_ANSIBLE_IF_INFO ADD COLUMN CONDUCTOR_STORAGE_PATH_ANS VARCHAR(256) AFTER ANSIBLE_PORT;
ALTER TABLE B_ANSIBLE_IF_INFO DROP COLUMN ANSTWR_HOSTNAME;

ALTER TABLE B_ANSIBLE_IF_INFO_JNL ADD COLUMN ANSTWR_HOST_ID INT AFTER ANSIBLE_PORT;
ALTER TABLE B_ANSIBLE_IF_INFO_JNL ADD COLUMN CONDUCTOR_STORAGE_PATH_ANS VARCHAR(256) AFTER ANSIBLE_PORT;
ALTER TABLE B_ANSIBLE_IF_INFO_JNL DROP COLUMN ANSTWR_HOSTNAME;


-- ----更新系テーブル作成
CREATE TABLE B_ANS_TWR_HOST ( 
  ANSTWR_HOST_ID                  INT                               ,
  ANSTWR_HOSTNAME                 VARCHAR (128)                     , -- ホスト名/IPアドレス
  ANSTWR_LOGIN_AUTH_TYPE          INT                               , -- 認証方式 パスワード認証/鍵認証
  ANSTWR_LOGIN_USER               VARCHAR (30)                      , -- ユーザー
  ANSTWR_LOGIN_PASSWORD           VARCHAR (60)                      , -- パスワード
  ANSTWR_LOGIN_SSH_KEY_FILE       VARCHAR (256)                     , -- 鍵ファイル
  ANSTWR_ISOLATED_TYPE            INT                               , -- 1:isolated tower 
-- 
  DISP_SEQ                        INT                               ,
  NOTE                            VARCHAR (4000)                    ,
  DISUSE_FLAG                     VARCHAR (1)                       ,
  LAST_UPDATE_TIMESTAMP           DATETIME(6)                       ,
  LAST_UPDATE_USER                INT                               ,
  PRIMARY KEY (ANSTWR_HOST_ID) 
)ENGINE = InnoDB, CHARSET = utf8, COLLATE = utf8_bin, ROW_FORMAT=COMPRESSED ,KEY_BLOCK_SIZE=8; 
-- 更新系テーブル作成----

-- ----履歴系テーブル作成
CREATE TABLE B_ANS_TWR_HOST_JNL ( 
  JOURNAL_SEQ_NO                  INT                               ,
  JOURNAL_REG_DATETIME            DATETIME(6)                       ,
  JOURNAL_ACTION_CLASS            VARCHAR (8)                       ,
-- 
  ANSTWR_HOST_ID                  INT                               ,
  ANSTWR_HOSTNAME                 VARCHAR (128)                     , -- ホスト名/IPアドレス
  ANSTWR_LOGIN_AUTH_TYPE          INT                               , -- 認証方式 パスワード認証/鍵認証
  ANSTWR_LOGIN_USER               VARCHAR (30)                      , -- ユーザー
  ANSTWR_LOGIN_PASSWORD           VARCHAR (60)                      , -- パスワード
  ANSTWR_LOGIN_SSH_KEY_FILE       VARCHAR (256)                     , -- 鍵ファイル
  ANSTWR_ISOLATED_TYPE            INT                               , -- 1:isolated tower 
-- 
  DISP_SEQ                        INT                               ,
  NOTE                            VARCHAR (4000)                    ,
  DISUSE_FLAG                     VARCHAR (1)                       ,
  LAST_UPDATE_TIMESTAMP           DATETIME(6)                       ,
  LAST_UPDATE_USER                INT                               ,
  PRIMARY KEY (JOURNAL_SEQ_NO) 
)ENGINE = InnoDB, CHARSET = utf8, COLLATE = utf8_bin, ROW_FORMAT=COMPRESSED ,KEY_BLOCK_SIZE=8; 
-- 履歴系テーブル作成----

-- ----更新系テーブル作成
CREATE TABLE B_ANS_TWR_CREDENTIAL_TYPE ( 
  CREDENTIAL_TYPE_ID              INT                               ,
  CREDENTIAL_TYPE_NAME            VARCHAR (256)                     ,
   
  DISP_SEQ                        INT                               ,
  NOTE                            VARCHAR (4000)                    ,
  DISUSE_FLAG                     VARCHAR (1)                       ,
  LAST_UPDATE_TIMESTAMP           DATETIME(6)                       ,
  LAST_UPDATE_USER                INT                               ,
  PRIMARY KEY (CREDENTIAL_TYPE_ID) 
)ENGINE = InnoDB, CHARSET = utf8, COLLATE = utf8_bin, ROW_FORMAT=COMPRESSED ,KEY_BLOCK_SIZE=8; 
-- 更新系テーブル作成----

-- ----履歴系テーブル作成
CREATE TABLE B_ANS_TWR_CREDENTIAL_TYPE_JNL ( 
  JOURNAL_SEQ_NO                  INT                               ,
  JOURNAL_REG_DATETIME            DATETIME(6)                       ,
  JOURNAL_ACTION_CLASS            VARCHAR (8)                       ,
-- 
  CREDENTIAL_TYPE_ID              INT                               ,
  CREDENTIAL_TYPE_NAME            VARCHAR (256)                     ,
-- 
  DISP_SEQ                        INT                               ,
  NOTE                            VARCHAR (4000)                    ,
  DISUSE_FLAG                     VARCHAR (1)                       ,
  LAST_UPDATE_TIMESTAMP           DATETIME(6)                       ,
  LAST_UPDATE_USER                INT                               ,
  PRIMARY KEY (JOURNAL_SEQ_NO) 
)ENGINE = InnoDB, CHARSET = utf8, COLLATE = utf8_bin, ROW_FORMAT=COMPRESSED ,KEY_BLOCK_SIZE=8; 
-- 履歴系テーブル作成----


ALTER TABLE B_ANS_TEMPLATE_FILE MODIFY COLUMN VARS_LIST VARCHAR(8192);

ALTER TABLE B_ANS_TEMPLATE_FILE_JNL MODIFY COLUMN VARS_LIST VARCHAR(8192);


CREATE OR REPLACE VIEW D_ANS_TWR_HOST     AS 
SELECT
  * 
FROM 
  B_ANS_TWR_HOST
WHERE
  ANSTWR_ISOLATED_TYPE is NULL;
  
CREATE VIEW D_ANS_TWR_HOST_JNL AS 
SELECT
  * 
FROM 
  B_ANS_TWR_HOST_JNL
WHERE
  ANSTWR_ISOLATED_TYPE is NULL;

CREATE OR REPLACE VIEW D_ANSIBLE_TOWER_IF_INFO AS 
SELECT 
  TAB_A.*,
  TAB_B.ANSTWR_HOSTNAME,
  TAB_B.ANSTWR_LOGIN_AUTH_TYPE,
  TAB_B.ANSTWR_LOGIN_USER,
  TAB_B.ANSTWR_LOGIN_PASSWORD,
  TAB_B.ANSTWR_LOGIN_SSH_KEY_FILE,
  TAB_B.ANSTWR_ISOLATED_TYPE
FROM
  B_ANSIBLE_IF_INFO           TAB_A
  LEFT JOIN (
             SELECT * 
             FROM B_ANS_TWR_HOST 
             WHERE DISUSE_FLAG = '0'
            ) TAB_B ON ( TAB_A.ANSTWR_HOST_ID = TAB_B.ANSTWR_HOST_ID );
  
CREATE OR REPLACE VIEW D_ANSIBLE_TOWER_IF_INFO_JNL AS 
SELECT 
  TAB_A.*,
  TAB_B.ANSTWR_HOSTNAME,
  TAB_B.ANSTWR_LOGIN_AUTH_TYPE,
  TAB_B.ANSTWR_LOGIN_USER,
  TAB_B.ANSTWR_LOGIN_PASSWORD,
  TAB_B.ANSTWR_LOGIN_SSH_KEY_FILE,
  TAB_B.ANSTWR_ISOLATED_TYPE
FROM
  B_ANSIBLE_IF_INFO_JNL         TAB_A
  LEFT JOIN (
             SELECT * 
             FROM B_ANS_TWR_HOST_JNL
             WHERE DISUSE_FLAG = '0'
            ) TAB_B ON ( TAB_A.ANSTWR_HOST_ID = TAB_B.ANSTWR_HOST_ID );


ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG ADD COLUMN MULTIPLELOG_MODE INT AFTER EXEC_MODE;
ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG ADD COLUMN LOGFILELIST_JSON VARCHAR(8000) AFTER MULTIPLELOG_MODE;
ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG ADD COLUMN CONDUCTOR_NAME VARCHAR(256) AFTER LOGFILELIST_JSON;
ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG ADD COLUMN CONDUCTOR_INSTANCE_NO INT AFTER CONDUCTOR_NAME;

ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG_JNL ADD COLUMN MULTIPLELOG_MODE INT AFTER EXEC_MODE;
ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG_JNL ADD COLUMN LOGFILELIST_JSON VARCHAR(8000) AFTER MULTIPLELOG_MODE;
ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG_JNL ADD COLUMN CONDUCTOR_NAME VARCHAR(256) AFTER LOGFILELIST_JSON;
ALTER TABLE C_ANSIBLE_LNS_EXE_INS_MNG_JNL ADD COLUMN CONDUCTOR_INSTANCE_NO INT AFTER CONDUCTOR_NAME;


CREATE OR REPLACE VIEW E_ANSIBLE_LNS_EXE_INS_MNG AS
SELECT 
         TAB_A.EXECUTION_NO              ,
         TAB_A.SYMPHONY_NAME             ,
         TAB_A.EXECUTION_USER            ,
         TAB_A.STATUS_ID                 ,
         TAB_C.STATUS_NAME               ,
         TAB_A.SYMPHONY_INSTANCE_NO      ,
         TAB_A.PATTERN_ID                ,
         TAB_A.I_PATTERN_NAME            ,
         TAB_A.I_TIME_LIMIT              ,
         TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID ,
         TAB_E.HOST_DESIGNATE_TYPE_NAME    ANS_HOST_DESIGNATE_TYPE_NAME,
         TAB_A.I_ANS_PARALLEL_EXE        ,
         TAB_A.I_ANS_WINRM_ID            ,
         TAB_A.I_ANS_PLAYBOOK_HED_DEF,
         TAB_A.I_ANS_EXEC_OPTIONS        ,
         TAB_F.FLAG_NAME                   ANS_WINRM_FLAG_NAME,
         TAB_A.OPERATION_NO_UAPK         ,
         TAB_A.I_OPERATION_NAME          ,
         TAB_A.I_OPERATION_NO_IDBH       ,
         TAB_A.I_VIRTUALENV_NAME         ,
         TAB_A.TIME_BOOK                 ,
         TAB_A.TIME_START                ,
         TAB_A.TIME_END                  ,
         TAB_A.FILE_INPUT                ,
         TAB_A.FILE_RESULT               ,
         TAB_A.RUN_MODE                  ,
         TAB_D.RUN_MODE_NAME             ,
         TAB_A.EXEC_MODE                 ,
         TAB_G.NAME AS EXEC_MODE_NAME    ,
         TAB_A.MULTIPLELOG_MODE          ,
         TAB_A.LOGFILELIST_JSON          ,
         TAB_A.CONDUCTOR_NAME            ,
         TAB_A.CONDUCTOR_INSTANCE_NO     ,
         TAB_A.DISP_SEQ                  ,
         TAB_A.NOTE                      ,
         TAB_A.DISUSE_FLAG               ,
         TAB_A.LAST_UPDATE_TIMESTAMP     ,
         TAB_A.LAST_UPDATE_USER
FROM C_ANSIBLE_LNS_EXE_INS_MNG       TAB_A
LEFT JOIN E_ANSIBLE_LNS_PATTERN      TAB_B ON ( TAB_B.PATTERN_ID = TAB_A.PATTERN_ID )
LEFT JOIN D_ANSIBLE_LNS_INS_STATUS   TAB_C ON ( TAB_A.STATUS_ID = TAB_C.STATUS_ID )
LEFT JOIN D_ANSIBLE_LNS_INS_RUN_MODE TAB_D ON ( TAB_A.RUN_MODE = TAB_D.RUN_MODE_ID )
LEFT JOIN B_HOST_DESIGNATE_TYPE_LIST TAB_E ON ( TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID = TAB_E.HOST_DESIGNATE_TYPE_ID )
LEFT JOIN D_FLAG_LIST_01             TAB_F ON ( TAB_A.I_ANS_WINRM_ID = TAB_F.FLAG_ID )
LEFT JOIN B_ANSIBLE_EXEC_MODE        TAB_G ON ( TAB_A.EXEC_MODE = TAB_G.ID )
;

CREATE OR REPLACE VIEW E_ANSIBLE_LNS_EXE_INS_MNG_JNL AS 
SELECT 
         TAB_A.JOURNAL_SEQ_NO            ,
         TAB_A.JOURNAL_REG_DATETIME      ,
         TAB_A.JOURNAL_ACTION_CLASS      ,
         TAB_A.EXECUTION_NO              ,
         TAB_A.SYMPHONY_NAME             ,
         TAB_A.EXECUTION_USER            ,
         TAB_A.STATUS_ID                 ,
         TAB_C.STATUS_NAME               ,
         TAB_A.SYMPHONY_INSTANCE_NO      ,
         TAB_A.PATTERN_ID                ,
         TAB_A.I_PATTERN_NAME            ,
         TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID ,
         TAB_E.HOST_DESIGNATE_TYPE_NAME    ANS_HOST_DESIGNATE_TYPE_NAME,
         TAB_A.I_ANS_PARALLEL_EXE        ,
         TAB_A.I_ANS_WINRM_ID            ,
         TAB_A.I_ANS_PLAYBOOK_HED_DEF    ,
         TAB_A.I_ANS_EXEC_OPTIONS        ,
         TAB_F.FLAG_NAME                   ANS_WINRM_FLAG_NAME,
         TAB_A.I_TIME_LIMIT              ,
         TAB_A.OPERATION_NO_UAPK         ,
         TAB_A.I_OPERATION_NAME          ,
         TAB_A.I_OPERATION_NO_IDBH       ,
         TAB_A.I_VIRTUALENV_NAME         ,
         TAB_A.TIME_BOOK                 ,
         TAB_A.TIME_START                ,
         TAB_A.TIME_END                  ,
         TAB_A.FILE_INPUT                ,
         TAB_A.FILE_RESULT               ,
         TAB_A.RUN_MODE                  ,
         TAB_D.RUN_MODE_NAME             ,
         TAB_A.EXEC_MODE                 ,
         TAB_G.NAME AS EXEC_MODE_NAME    ,
         TAB_A.MULTIPLELOG_MODE          ,
         TAB_A.LOGFILELIST_JSON          ,
         TAB_A.CONDUCTOR_NAME            ,
         TAB_A.CONDUCTOR_INSTANCE_NO     ,
         TAB_A.DISP_SEQ                  ,
         TAB_A.NOTE                      ,
         TAB_A.DISUSE_FLAG               ,
         TAB_A.LAST_UPDATE_TIMESTAMP     ,
         TAB_A.LAST_UPDATE_USER           
FROM C_ANSIBLE_LNS_EXE_INS_MNG_JNL   TAB_A
LEFT JOIN E_ANSIBLE_LNS_PATTERN      TAB_B ON ( TAB_B.PATTERN_ID = TAB_A.PATTERN_ID )
LEFT JOIN D_ANSIBLE_LNS_INS_STATUS   TAB_C ON ( TAB_A.STATUS_ID = TAB_C.STATUS_ID )
LEFT JOIN D_ANSIBLE_LNS_INS_RUN_MODE TAB_D ON ( TAB_A.RUN_MODE = TAB_D.RUN_MODE_ID )
LEFT JOIN B_HOST_DESIGNATE_TYPE_LIST TAB_E ON ( TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID = TAB_E.HOST_DESIGNATE_TYPE_ID )
LEFT JOIN D_FLAG_LIST_01             TAB_F ON ( TAB_A.I_ANS_WINRM_ID = TAB_F.FLAG_ID )
LEFT JOIN B_ANSIBLE_EXEC_MODE        TAB_G ON ( TAB_A.EXEC_MODE = TAB_G.ID )
;


ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG ADD COLUMN MULTIPLELOG_MODE INT AFTER EXEC_MODE;
ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG ADD COLUMN LOGFILELIST_JSON VARCHAR(8000) AFTER MULTIPLELOG_MODE;
ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG ADD COLUMN CONDUCTOR_NAME VARCHAR(256) AFTER LOGFILELIST_JSON;
ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG ADD COLUMN CONDUCTOR_INSTANCE_NO INT AFTER CONDUCTOR_NAME;

ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG_JNL ADD COLUMN MULTIPLELOG_MODE INT AFTER EXEC_MODE;
ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG_JNL ADD COLUMN LOGFILELIST_JSON VARCHAR(8000) AFTER MULTIPLELOG_MODE;
ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG_JNL ADD COLUMN CONDUCTOR_NAME VARCHAR(256) AFTER LOGFILELIST_JSON;
ALTER TABLE C_ANSIBLE_PNS_EXE_INS_MNG_JNL ADD COLUMN CONDUCTOR_INSTANCE_NO INT AFTER CONDUCTOR_NAME;


CREATE OR REPLACE VIEW E_ANSIBLE_PNS_EXE_INS_MNG AS
SELECT 
         TAB_A.EXECUTION_NO              ,
         TAB_A.SYMPHONY_NAME             ,
         TAB_A.EXECUTION_USER            ,
         TAB_A.STATUS_ID                 ,
         TAB_C.STATUS_NAME               ,
         TAB_A.SYMPHONY_INSTANCE_NO      ,
         TAB_A.PATTERN_ID                ,
         TAB_A.I_PATTERN_NAME            ,
         TAB_A.I_TIME_LIMIT              ,
         TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID ,
         TAB_A.I_ANS_PARALLEL_EXE        ,
         TAB_A.I_ANS_WINRM_ID            ,
         TAB_A.I_ANS_PLAYBOOK_HED_DEF    ,
         TAB_A.I_ANS_EXEC_OPTIONS        ,
         TAB_F.FLAG_NAME                   ANS_WINRM_FLAG_NAME,
         TAB_E.HOST_DESIGNATE_TYPE_NAME    ANS_HOST_DESIGNATE_TYPE_NAME,
         TAB_A.OPERATION_NO_UAPK         ,
         TAB_A.I_OPERATION_NAME          ,
         TAB_A.I_OPERATION_NO_IDBH       ,
         TAB_A.I_VIRTUALENV_NAME         ,         
         TAB_A.TIME_BOOK                 ,
         TAB_A.TIME_START                ,
         TAB_A.TIME_END                  ,
         TAB_A.FILE_INPUT                ,
         TAB_A.FILE_RESULT               ,
         TAB_A.RUN_MODE                  ,
         TAB_D.RUN_MODE_NAME             ,
         TAB_A.EXEC_MODE                 ,
         TAB_G.NAME AS EXEC_MODE_NAME    ,
         TAB_A.MULTIPLELOG_MODE          ,
         TAB_A.LOGFILELIST_JSON          ,
         TAB_A.CONDUCTOR_NAME            ,
         TAB_A.CONDUCTOR_INSTANCE_NO     ,
         TAB_A.DISP_SEQ                  ,
         TAB_A.NOTE                      ,
         TAB_A.DISUSE_FLAG               ,
         TAB_A.LAST_UPDATE_TIMESTAMP     ,
         TAB_A.LAST_UPDATE_USER
FROM C_ANSIBLE_PNS_EXE_INS_MNG       TAB_A
LEFT JOIN E_ANSIBLE_PNS_PATTERN      TAB_B ON ( TAB_B.PATTERN_ID = TAB_A.PATTERN_ID )
LEFT JOIN D_ANSIBLE_PNS_INS_STATUS   TAB_C ON ( TAB_A.STATUS_ID = TAB_C.STATUS_ID )
LEFT JOIN D_ANSIBLE_PNS_INS_RUN_MODE TAB_D ON ( TAB_A.RUN_MODE = TAB_D.RUN_MODE_ID )
LEFT JOIN B_HOST_DESIGNATE_TYPE_LIST TAB_E ON ( TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID = TAB_E.HOST_DESIGNATE_TYPE_ID )
LEFT JOIN D_FLAG_LIST_01             TAB_F ON ( TAB_A.I_ANS_WINRM_ID = TAB_F.FLAG_ID )
LEFT JOIN B_ANSIBLE_EXEC_MODE        TAB_G ON ( TAB_A.EXEC_MODE = TAB_G.ID )
;

CREATE OR REPLACE VIEW E_ANSIBLE_PNS_EXE_INS_MNG_JNL AS 
SELECT 
         TAB_A.JOURNAL_SEQ_NO            ,
         TAB_A.JOURNAL_REG_DATETIME      ,
         TAB_A.JOURNAL_ACTION_CLASS      ,
         TAB_A.EXECUTION_NO              ,
         TAB_A.SYMPHONY_NAME             ,
         TAB_A.EXECUTION_USER            ,
         TAB_A.STATUS_ID                 ,
         TAB_C.STATUS_NAME               ,
         TAB_A.SYMPHONY_INSTANCE_NO      ,
         TAB_A.PATTERN_ID                ,
         TAB_A.I_PATTERN_NAME            ,
         TAB_A.I_TIME_LIMIT              ,
         TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID ,
         TAB_A.I_ANS_PARALLEL_EXE        ,
         TAB_A.I_ANS_WINRM_ID            ,
         TAB_A.I_ANS_PLAYBOOK_HED_DEF    ,
         TAB_A.I_ANS_EXEC_OPTIONS        ,
         TAB_F.FLAG_NAME                   ANS_WINRM_FLAG_NAME,
         TAB_E.HOST_DESIGNATE_TYPE_NAME    ANS_HOST_DESIGNATE_TYPE_NAME,
         TAB_A.OPERATION_NO_UAPK         ,
         TAB_A.I_OPERATION_NAME          ,
         TAB_A.I_OPERATION_NO_IDBH       ,
         TAB_A.I_VIRTUALENV_NAME         ,         
         TAB_A.TIME_BOOK                 ,
         TAB_A.TIME_START                ,
         TAB_A.TIME_END                  ,
         TAB_A.FILE_INPUT                ,
         TAB_A.FILE_RESULT               ,
         TAB_A.RUN_MODE                  ,
         TAB_D.RUN_MODE_NAME             ,
         TAB_A.EXEC_MODE                 ,
         TAB_G.NAME AS EXEC_MODE_NAME    ,
         TAB_A.MULTIPLELOG_MODE          ,
         TAB_A.LOGFILELIST_JSON          ,
         TAB_A.CONDUCTOR_NAME            ,
         TAB_A.CONDUCTOR_INSTANCE_NO     ,
         TAB_A.DISP_SEQ                  ,
         TAB_A.NOTE                      ,
         TAB_A.DISUSE_FLAG               ,
         TAB_A.LAST_UPDATE_TIMESTAMP     ,
         TAB_A.LAST_UPDATE_USER           
FROM C_ANSIBLE_PNS_EXE_INS_MNG_JNL   TAB_A
LEFT JOIN E_ANSIBLE_PNS_PATTERN      TAB_B ON ( TAB_B.PATTERN_ID = TAB_A.PATTERN_ID )
LEFT JOIN D_ANSIBLE_PNS_INS_STATUS   TAB_C ON ( TAB_A.STATUS_ID = TAB_C.STATUS_ID )
LEFT JOIN D_ANSIBLE_PNS_INS_RUN_MODE TAB_D ON ( TAB_A.RUN_MODE = TAB_D.RUN_MODE_ID )
LEFT JOIN B_HOST_DESIGNATE_TYPE_LIST TAB_E ON ( TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID = TAB_E.HOST_DESIGNATE_TYPE_ID )
LEFT JOIN D_FLAG_LIST_01             TAB_F ON ( TAB_A.I_ANS_WINRM_ID = TAB_F.FLAG_ID )
LEFT JOIN B_ANSIBLE_EXEC_MODE        TAB_G ON ( TAB_A.EXEC_MODE = TAB_G.ID )
;


CREATE OR REPLACE VIEW D_ANS_PNS_CMDB_MENU_COLUMN AS
SELECT
  TBL_A.*
FROM 
  B_CMDB_MENU_COLUMN TBL_A
WHERE
  TBL_A.COL_CLASS   <>  'MultiTextColumn'
;
  
CREATE OR REPLACE VIEW D_ANS_PNS_CMDB_MENU_COLUMN_JNL AS
SELECT
  TBL_A.*
FROM 
  B_CMDB_MENU_COLUMN_JNL TBL_A
WHERE
  TBL_A.COL_CLASS   <>  'MultiTextColumn'
;

CREATE OR REPLACE VIEW D_ANS_PNS_CMDB_MENU_LIST AS
SELECT 
  TBL_A.*
FROM 
  D_CMDB_MENU_LIST TBL_A
WHERE
  (SELECT 
     COUNT(*) 
   FROM 
     B_CMDB_MENU_COLUMN TBL_B
   WHERE
     TBL_A.MENU_ID     =   TBL_B.MENU_ID     AND
     TBL_B.COL_CLASS   <>  'MultiTextColumn' AND
     TBL_B.DISUSE_FLAG =   '0'
  ) <> 0
;

CREATE OR REPLACE VIEW D_ANS_PNS_CMDB_MENU_LIST_JNL AS
SELECT 
  TBL_A.*
FROM 
  D_CMDB_MENU_LIST_JNL TBL_A
WHERE
  (SELECT 
     COUNT(*) 
   FROM 
     B_CMDB_MENU_COLUMN_JNL TBL_B
   WHERE
     TBL_A.MENU_ID     =   TBL_B.MENU_ID     AND
     TBL_B.COL_CLASS   <>  'MultiTextColumn' AND
     TBL_B.DISUSE_FLAG =   '0'
  ) <> 0
;

CREATE OR REPLACE VIEW D_ANS_PNS_CMDB_MG_MU_COL_LIST AS
SELECT
  TAB_A.COLUMN_LIST_ID                 ,
  CONCAT(TAB_D.MENU_GROUP_ID,':',TAB_D.MENU_GROUP_NAME,':',TAB_C.MENU_ID,':',TAB_C.MENU_NAME,':',TAB_A.COLUMN_LIST_ID,':',TAB_A.COL_TITLE) MENU_COL_TITLE_PULLDOWN,
  TAB_C.MENU_ID                        ,
  TAB_A.COL_TITLE_DISP_SEQ             ,
  TAB_A.DISP_SEQ                       ,
  TAB_A.NOTE                           ,
  TAB_A.DISUSE_FLAG                    ,
  TAB_A.LAST_UPDATE_TIMESTAMP          ,
  TAB_A.LAST_UPDATE_USER
FROM        D_ANS_PNS_CMDB_MENU_COLUMN TAB_A
  LEFT JOIN D_ANS_PNS_CMDB_MENU_LIST   TAB_B ON (TAB_A.MENU_ID       = TAB_B.MENU_ID)
  LEFT JOIN A_MENU_LIST                TAB_C ON (TAB_A.MENU_ID       = TAB_C.MENU_ID)
  LEFT JOIN A_MENU_GROUP_LIST          TAB_D ON (TAB_C.MENU_GROUP_ID = TAB_D.MENU_GROUP_ID)
WHERE
   TAB_A.DISUSE_FLAG = '0' AND
   TAB_B.DISUSE_FLAG = '0' AND
   TAB_C.DISUSE_FLAG = '0' AND
   TAB_D.DISUSE_FLAG = '0'
;

CREATE OR REPLACE VIEW D_ANS_PNS_CMDB_MG_MU_COL_LIST_JNL AS
SELECT
  TAB_A.COLUMN_LIST_ID                 ,
  CONCAT(TAB_D.MENU_GROUP_ID,':',TAB_D.MENU_GROUP_NAME,':',TAB_C.MENU_ID,':',TAB_C.MENU_NAME,':',TAB_A.COLUMN_LIST_ID,':',TAB_A.COL_TITLE) MENU_COL_PULLDOWN,
  TAB_C.MENU_ID                        ,
  TAB_A.COL_TITLE_DISP_SEQ             ,
  TAB_A.DISP_SEQ                       ,
  TAB_A.NOTE                           ,
  TAB_A.DISUSE_FLAG                    ,
  TAB_A.LAST_UPDATE_TIMESTAMP          ,
  TAB_A.LAST_UPDATE_USER
FROM        D_ANS_PNS_CMDB_MENU_COLUMN_JNL TAB_A
  LEFT JOIN D_ANS_PNS_CMDB_MENU_LIST       TAB_B ON (TAB_A.MENU_ID       = TAB_B.MENU_ID)
  LEFT JOIN A_MENU_LIST                    TAB_C ON (TAB_A.MENU_ID       = TAB_C.MENU_ID)
  LEFT JOIN A_MENU_GROUP_LIST              TAB_D ON (TAB_C.MENU_GROUP_ID = TAB_D.MENU_GROUP_ID)
WHERE
   TAB_A.DISUSE_FLAG = '0' AND
   TAB_B.DISUSE_FLAG = '0' AND
   TAB_C.DISUSE_FLAG = '0' AND
   TAB_D.DISUSE_FLAG = '0'
;


ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG ADD COLUMN MULTIPLELOG_MODE INT AFTER EXEC_MODE;
ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG ADD COLUMN LOGFILELIST_JSON VARCHAR(8000) AFTER MULTIPLELOG_MODE;
ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG ADD COLUMN CONDUCTOR_NAME VARCHAR(256) AFTER LOGFILELIST_JSON;
ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG ADD COLUMN CONDUCTOR_INSTANCE_NO INT AFTER CONDUCTOR_NAME;

ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG_JNL ADD COLUMN MULTIPLELOG_MODE INT AFTER EXEC_MODE;
ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG_JNL ADD COLUMN LOGFILELIST_JSON VARCHAR(8000) AFTER MULTIPLELOG_MODE;
ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG_JNL ADD COLUMN CONDUCTOR_NAME VARCHAR(256) AFTER LOGFILELIST_JSON;
ALTER TABLE C_ANSIBLE_LRL_EXE_INS_MNG_JNL ADD COLUMN CONDUCTOR_INSTANCE_NO INT AFTER CONDUCTOR_NAME;


CREATE OR REPLACE VIEW E_ANSIBLE_LRL_EXE_INS_MNG AS
SELECT 
         TAB_A.EXECUTION_NO              ,
         TAB_A.EXECUTION_USER            ,
         TAB_A.SYMPHONY_NAME             ,
         TAB_A.STATUS_ID                 ,
         TAB_C.STATUS_NAME               ,
         TAB_A.SYMPHONY_INSTANCE_NO      ,
         TAB_A.PATTERN_ID                ,
         TAB_A.I_PATTERN_NAME            ,
         TAB_A.I_TIME_LIMIT              ,
         TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID ,
         TAB_E.HOST_DESIGNATE_TYPE_NAME    ANS_HOST_DESIGNATE_TYPE_NAME,
         TAB_A.I_ANS_PARALLEL_EXE        ,
         TAB_A.I_ANS_WINRM_ID            ,
         TAB_A.I_ANS_PLAYBOOK_HED_DEF    ,
         TAB_A.I_ANS_EXEC_OPTIONS        ,
         TAB_F.FLAG_NAME                   ANS_WINRM_FLAG_NAME,
         TAB_A.OPERATION_NO_UAPK         ,
         TAB_A.I_OPERATION_NAME          ,
         TAB_A.I_OPERATION_NO_IDBH       ,
         TAB_A.I_VIRTUALENV_NAME         ,
         TAB_A.TIME_BOOK                 ,
         TAB_A.TIME_START                ,
         TAB_A.TIME_END                  ,
         TAB_A.FILE_INPUT                ,
         TAB_A.FILE_RESULT               ,
         TAB_A.RUN_MODE                  ,
         TAB_D.RUN_MODE_NAME             ,
         TAB_A.EXEC_MODE                 ,
         TAB_G.NAME AS EXEC_MODE_NAME    ,
         TAB_A.MULTIPLELOG_MODE          ,
         TAB_A.LOGFILELIST_JSON          ,
         TAB_A.CONDUCTOR_NAME            ,
         TAB_A.CONDUCTOR_INSTANCE_NO     ,
         TAB_A.DISP_SEQ                  ,
         TAB_A.NOTE                      ,
         TAB_A.DISUSE_FLAG               ,
         TAB_A.LAST_UPDATE_TIMESTAMP     ,
         TAB_A.LAST_UPDATE_USER
FROM C_ANSIBLE_LRL_EXE_INS_MNG       TAB_A
LEFT JOIN E_ANSIBLE_LRL_PATTERN      TAB_B ON ( TAB_B.PATTERN_ID = TAB_A.PATTERN_ID )
LEFT JOIN D_ANSIBLE_LRL_INS_STATUS   TAB_C ON ( TAB_A.STATUS_ID = TAB_C.STATUS_ID )
LEFT JOIN D_ANSIBLE_LRL_INS_RUN_MODE TAB_D ON ( TAB_A.RUN_MODE = TAB_D.RUN_MODE_ID )
LEFT JOIN B_HOST_DESIGNATE_TYPE_LIST TAB_E ON ( TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID = TAB_E.HOST_DESIGNATE_TYPE_ID )
LEFT JOIN D_FLAG_LIST_01             TAB_F ON ( TAB_A.I_ANS_WINRM_ID = TAB_F.FLAG_ID )
LEFT JOIN B_ANSIBLE_EXEC_MODE        TAB_G ON ( TAB_A.EXEC_MODE = TAB_G.ID )
;

CREATE OR REPLACE VIEW E_ANSIBLE_LRL_EXE_INS_MNG_JNL AS 
SELECT 
         TAB_A.JOURNAL_SEQ_NO            ,
         TAB_A.JOURNAL_REG_DATETIME      ,
         TAB_A.JOURNAL_ACTION_CLASS      ,
         TAB_A.EXECUTION_NO              ,
         TAB_A.SYMPHONY_NAME             ,
         TAB_A.EXECUTION_USER            ,
         TAB_A.STATUS_ID                 ,
         TAB_C.STATUS_NAME               ,
         TAB_A.SYMPHONY_INSTANCE_NO      ,
         TAB_A.PATTERN_ID                ,
         TAB_A.I_PATTERN_NAME            ,
         TAB_A.I_TIME_LIMIT              ,
         TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID ,
         TAB_E.HOST_DESIGNATE_TYPE_NAME    ANS_HOST_DESIGNATE_TYPE_NAME,
         TAB_A.I_ANS_PARALLEL_EXE        ,
         TAB_A.I_ANS_WINRM_ID            ,
         TAB_A.I_ANS_PLAYBOOK_HED_DEF    ,
         TAB_A.I_ANS_EXEC_OPTIONS        ,
         TAB_F.FLAG_NAME                   ANS_WINRM_FLAG_NAME,
         TAB_A.OPERATION_NO_UAPK         ,
         TAB_A.I_OPERATION_NAME          ,
         TAB_A.I_OPERATION_NO_IDBH       ,
         TAB_A.I_VIRTUALENV_NAME         ,
         TAB_A.TIME_BOOK                 ,
         TAB_A.TIME_START                ,
         TAB_A.TIME_END                  ,
         TAB_A.FILE_INPUT                ,
         TAB_A.FILE_RESULT               ,
         TAB_A.RUN_MODE                  ,
         TAB_D.RUN_MODE_NAME             ,
         TAB_A.EXEC_MODE                 ,
         TAB_G.NAME AS EXEC_MODE_NAME    ,
         TAB_A.MULTIPLELOG_MODE          ,
         TAB_A.LOGFILELIST_JSON          ,
         TAB_A.CONDUCTOR_NAME            ,
         TAB_A.CONDUCTOR_INSTANCE_NO     ,
         TAB_A.DISP_SEQ                  ,
         TAB_A.NOTE                      ,
         TAB_A.DISUSE_FLAG               ,
         TAB_A.LAST_UPDATE_TIMESTAMP     ,
         TAB_A.LAST_UPDATE_USER           
FROM C_ANSIBLE_LRL_EXE_INS_MNG_JNL TAB_A
LEFT JOIN E_ANSIBLE_LRL_PATTERN      TAB_B ON ( TAB_B.PATTERN_ID = TAB_A.PATTERN_ID )
LEFT JOIN D_ANSIBLE_LRL_INS_STATUS   TAB_C ON ( TAB_A.STATUS_ID = TAB_C.STATUS_ID )
LEFT JOIN D_ANSIBLE_LRL_INS_RUN_MODE TAB_D ON ( TAB_A.RUN_MODE = TAB_D.RUN_MODE_ID )
LEFT JOIN B_HOST_DESIGNATE_TYPE_LIST TAB_E ON ( TAB_A.I_ANS_HOST_DESIGNATE_TYPE_ID = TAB_E.HOST_DESIGNATE_TYPE_ID )
LEFT JOIN D_FLAG_LIST_01             TAB_F ON ( TAB_A.I_ANS_WINRM_ID = TAB_F.FLAG_ID )
LEFT JOIN B_ANSIBLE_EXEC_MODE        TAB_G ON ( TAB_A.EXEC_MODE = TAB_G.ID )
;


INSERT INTO A_SEQUENCE (NAME,VALUE) VALUES('B_ANS_TWR_HOST_RIC',1);

INSERT INTO A_SEQUENCE (NAME,VALUE) VALUES('B_ANS_TWR_HOST_JSQ',1);

INSERT INTO A_SEQUENCE (NAME,VALUE) VALUES('B_ANS_TWR_CREDENTIAL_TYPE_RIC',20);

INSERT INTO A_SEQUENCE (NAME,VALUE) VALUES('B_ANS_TWR_CREDENTIAL_TYPE_JSQ',20);


UPDATE A_MENU_LIST SET MENU_GROUP_ID=2100020002,DISP_SEQ=45 WHERE MENU_ID=2100000302;

INSERT INTO A_MENU_LIST (MENU_ID,MENU_GROUP_ID,MENU_NAME,WEB_PRINT_LIMIT,WEB_PRINT_CONFIRM,XLS_PRINT_LIMIT,LOGIN_NECESSITY,SERVICE_STATUS,AUTOFILTER_FLG,INITIAL_FILTER_FLG,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(2100040708,2100020000,'Ansible tower host list',NULL,NULL,NULL,1,0,1,2,25,'tower_host list','0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO A_MENU_LIST_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,MENU_ID,MENU_GROUP_ID,MENU_NAME,WEB_PRINT_LIMIT,WEB_PRINT_CONFIRM,XLS_PRINT_LIMIT,LOGIN_NECESSITY,SERVICE_STATUS,AUTOFILTER_FLG,INITIAL_FILTER_FLG,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(-40708,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',2100040708,2100020000,'Ansible tower host list',NULL,NULL,NULL,1,0,1,2,25,'tower_host list','0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);


UPDATE A_ROLE_MENU_LINK_LIST SET NOTE='System Administrator' WHERE LINK_ID=2100040707;

INSERT INTO A_ROLE_MENU_LINK_LIST (LINK_ID,ROLE_ID,MENU_ID,PRIVILEGE,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(2100040708,1,2100040708,1,'System Administrator','0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO A_ROLE_MENU_LINK_LIST_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,LINK_ID,ROLE_ID,MENU_ID,PRIVILEGE,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(-40708,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',2100040708,1,2100040708,1,'System Administrator','0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);


UPDATE B_ANSIBLE_IF_INFO SET CONDUCTOR_STORAGE_PATH_ANS='%%%%%ITA_DIRECTORY%%%%%/data_relay_storage/conductor',ANSIBLE_NUM_PARALLEL_EXEC=100 WHERE ANSIBLE_IF_INFO_ID=1;


UPDATE B_ITA_EXT_STM_MASTER SET MENU_ID=2100020113, EXEC_INS_MNG_TABLE_NAME='C_ANSIBLE_LNS_EXE_INS_MNG', LOG_TARGET='1' WHERE ITA_EXT_STM_ID=3;
UPDATE B_ITA_EXT_STM_MASTER SET MENU_ID=2100020213, EXEC_INS_MNG_TABLE_NAME='C_ANSIBLE_PNS_EXE_INS_MNG', LOG_TARGET='1' WHERE ITA_EXT_STM_ID=4;
UPDATE B_ITA_EXT_STM_MASTER SET MENU_ID=2100020314, EXEC_INS_MNG_TABLE_NAME='C_ANSIBLE_LRL_EXE_INS_MNG', LOG_TARGET='1' WHERE ITA_EXT_STM_ID=5;


UPDATE B_ANSIBLE_EXEC_MODE SET NAME='Ansible Engine' WHERE ID=1;


INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(1,'machine',1,NULL,'0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(1,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',1,'machine',1,NULL,'0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(3,'Vault',3,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(2,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',3,'Vault',3,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(4,'network',4,NULL,'0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(3,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',4,'network',4,NULL,'0',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(5,'Amazon Web Services',5,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(4,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',5,'Amazon Web Services',5,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(6,'OpenStack',6,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(5,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',6,'OpenStack',6,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(7,'VMware vCenter',7,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(6,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',7,'VMware vCenter',7,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(8,'Red Hat Satellite 6',8,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(7,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',8,'Red Hat Satellite 6',8,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(9,'Red Hat CloudForms',9,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(8,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',9,'Red Hat CloudForms',9,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(10,'Google Compute Engine',10,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(9,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',10,'Google Compute Engine',10,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(11,'Microsoft Azure Resource Manager',11,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(10,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',11,'Microsoft Azure Resource Manager',11,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(12,'GitHub Personal Access Token',12,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(11,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',12,'GitHub Personal Access Token',12,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(14,'Insights',14,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(12,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',14,'Insights',14,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(15,'Red Hat Virtualization',15,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(13,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',15,'Red Hat Virtualization',15,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(16,'Ansible Tower',16,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(14,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',16,'Ansible Tower',16,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(17,'OpenShift or Kubernetes API Bearer Token',17,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(15,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',17,'OpenShift or Kubernetes API Bearer Token',17,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(18,'CyberArk AIM Central Credential Provider Lookup',18,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(16,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',18,'CyberArk AIM Central Credential Provider Lookup',18,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(19,'Microsoft Azure Key Vault',19,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(17,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',19,'Microsoft Azure Key Vault',19,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(20,'CyberArk Conjur Secret Lookup',20,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(18,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',20,'CyberArk Conjur Secret Lookup',20,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(21,'HashiCorp Vault Secret Lookup',21,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(19,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',21,'HashiCorp Vault Secret Lookup',21,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE (CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(22,'HashiCorp Vault Signed SSH',22,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);
INSERT INTO B_ANS_TWR_CREDENTIAL_TYPE_JNL (JOURNAL_SEQ_NO,JOURNAL_REG_DATETIME,JOURNAL_ACTION_CLASS,CREDENTIAL_TYPE_ID,CREDENTIAL_TYPE_NAME,DISP_SEQ,NOTE,DISUSE_FLAG,LAST_UPDATE_TIMESTAMP,LAST_UPDATE_USER) VALUES(20,STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),'INSERT',22,'HashiCorp Vault Signed SSH',22,NULL,'1',STR_TO_DATE('2015/04/01 10:00:00.000000','%Y/%m/%d %H:%i:%s.%f'),1);

